var mfzch = {
	game: new gameModel(),
	templateGame: '',
	frameSet: [],
	companies: [],
	loadouts: [],
	settings: new settingsModel(),
	appState: new appStateModel(),
	frameNow: 1,
	offlinemodified: true,

	/* Parse saved game data */
	gameDataToGameModel: function (loadedData) {
		var restoredGame = new gameModel;
		for (var i in loadedData) {
			if(i == 'teams') {
				restoredGame[i] = [];
				for (var j in loadedData[i]) {
					restoredGame[i][j] = new teamModel;

					for (var k in loadedData[i][j]) {
						if (k == 'cFrames') {
							restoredGame[i][j][k] = [];
							for (var l in loadedData[i][j][k]) {
								restoredGame[i][j][k][l] = new frameModel();
								for (var m in loadedData[i][j][k][l]) {
									restoredGame[i][j][k][l][m] = loadedData[i][j][k][l][m];
								}
							}

						} else {
							restoredGame[i][j][k] = loadedData[i][j][k];
						}
					}
				}
			} else {
				restoredGame[i] = loadedData[i]
			}
		}
		return restoredGame;
	},
	JSONtoGameModel: function (loadJSON) {
		return restoredGame = this.gameDataToGameModel(JSON.parse(loadJSON));
	},

	/* Load and Save */

	saveData: function(dataType) {
		if (
			dataType == 'game'
			|| dataType == 'templateGame'
			|| dataType == 'frameSet'
			|| dataType == 'companies'
			|| dataType == 'loadouts'
			|| dataType == 'settings'
		) {
			return this.saveLocalData(dataType) && this.syncServerData(dataType);
		} else {
			return false;
		}
	},

	/* Local data save/restore */

	saveLocalData: function(dataType) {
		if (!this.hasOwnProperty(dataType)) {
			return false;
		}

		var location = 'mfz.' + dataType;
		var data = this[dataType];

		if (
			dataType == 'game'
			|| dataType == 'templateGame'
			|| dataType == 'frameSet'
			|| dataType == 'companies'
			|| dataType == 'loadouts'
			|| dataType == 'settings'
		) {
			this.offlinemodified = true;

			if (!supportsLocalStorage()) { return false; }
			if (dataType == 'templateGame') {
				localStorage[location] = data;
			} else {
				localStorage[location] = JSON.stringify(data);
			}

			if (dataType = 'companies') {
				this.saveServerData(dataType);
			}

			return true;
		} else {
			return false;
		}
	},
	restoreLocalData: function(dataType) {
		if (!this.hasOwnProperty(dataType)) {
			return false;
		}

		var location = 'mfz.' + dataType;
		var data = this[dataType];

		if (supportsLocalStorage() && localStorage[location]) {
			var loadedData = JSON.parse(localStorage[location]);

			if (dataType == 'game') {
				return restoredGame = mfzch.gameDataToGameModel(loadedData);
			} else if (dataType == 'templateGame') {
				return localStorage[location];
			} else if (dataType == 'frameSet') {
				var restoredSim = [];
				for (var i in loadedData) {
					restoredSim[i] = new frameModel;
					for (var j in loadedData[i]) {
						restoredSim[i][j] = loadedData[i][j];
					}
				}
				return restoredSim;
			} else if (dataType == 'companies') {
				var restoredCompanies = [];
				for (var i in loadedData) {
					restoredCompanies[i] = new companyModel;
					for (var j in loadedData[i]) {
						if(j == 'frames') {
							restoredCompanies[i][j] = [];
							for (var k in loadedData[i][j]) {
								restoredCompanies[i][j][k] = new frameModel;
								for (var l in loadedData[i][j][k]) {
									restoredCompanies[i][j][k][l] = loadedData[i][j][k][l];
								}
							}
						} else {
							restoredCompanies[i][j] = loadedData[i][j];
						}
					}
				}
				return restoredCompanies;
			} else if (dataType == 'loadouts') {
				var restoredLoadouts = [];
				for (var i in loadedData) {
					restoredLoadouts[i] = new frameModel;
					for (var j in loadedData[i]) {
						restoredLoadouts[i][j] = loadedData[i][j];
					}
				}
				return restoredLoadouts;
			} else if (dataType == 'settings') {
				var restoredSettings = new settingsModel();
				for (var i in loadedData) {
					restoredSettings[i] = loadedData[i];
				}
				return restoredSettings;
			} else {
				return false;
			}
		} else {
			if (dataType == 'game') {
				return new gameModel();
			} else if (dataType == 'templateGame') {
				return '';
			} else if (dataType == 'frameSet') {
				var protoSim = [];
				protoSim[1] = new frameModel();
				protoSim[2] = new frameModel();
				return protoSim;
			} else if (dataType == 'companies') {
				return [];
			} else if (dataType == 'loadouts') {
				return [];
			} else if (dataType == 'settings') {
				return new settingsModel();
			} else {
				return false;
			}
		}
	},

	/* Server save/restore */

	saveServerData: function(dataType) {
		if (this.appState.isElite) {
			if (!this.hasOwnProperty(dataType)) {
				return false;
			}

			if (
	//			|| dataType == 'game'
				dataType == 'companies'
	//			|| dataType == 'loadouts'
	//			|| dataType == 'settings'
			) {
				if (mfzch.settings.activeSync && isOnline()) {
					var postdata = new Object();

					var data = this[dataType]

					if (data) {
						postdata[dataType] = JSON.stringify(data);

						$.post('/save-data', postdata)
						.done(function(result) {
							this.offlinemodified = false;
							for (var i in data) {
								if (result[i]) {
									if (data[i].name == result[i].name) {
										if (data[i].id === false && result[i].id) {
											data[i].id = result[i].id;
										}
										data[i].servermodified = result[i].servermodified;
										data[i].clientmodified = false;
									}
								}
							}
						});
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else {
			return false;
		}
	},
	restoreServerData: function(dataType) {
		if (this.appState.isElite) {
			if (!this.hasOwnProperty(dataType)) {
				return false;
			}

			if (mfzch.settings.activeSync && isOnline()) {
				var postdata = new Object();
				postdata['type'] = dataType;

				$.post('/load-data', postdata)
				.done(function(result) {
					// success

					for (var i in result) {
						if (result[i].type == 'companies') {

							var companyMap = {};
							for (var l=0; l < mfzch.companies.length; l++) {
								companyMap[ mfzch.companies[l]['id'] ] = true;
							}

							for (var c in result[i].data) {
								if (!companyMap.hasOwnProperty(result[i].data[c].id)) {
									// No match with server means item was deleted locally
									var delData = new Object();

									delData['companies'] = result[i].data[c].id;
									$.post('/delete-data', delData);
								} else {
									var found = false;
									for (var ec in mfzch.companies) {
										if (mfzch.companies[ec].id == result[i].data[c].id) {
											var found = true;

											var useServer = true;

											if (mfzch.companies[ec].clientmodified) {
												if (result[i].data[c].servermodified <= mfzch.companies[ec].servermodified) {
													useServer = false;
												}
											}

											if (useServer) {
												mfzch.companies[ec].id = result[i].data[c].id;
												mfzch.companies[ec].name = result[i].data[c].name;
												mfzch.companies[ec].description = result[i].data[c].description;
												mfzch.companies[ec].shared = result[i].data[c].shared;
												mfzch.companies[ec].color = result[i].data[c].color;

												var restoredFrames = [];
												for (var rf in result[i].data[c].frames) {
													restoredFrames[rf] = new frameModel;
													for (var frame in result[i].data[c].frames[rf]) {
														restoredFrames[rf][frame] = result[i].data[c].frames[rf][frame];
													}
												}

												mfzch.companies[ec].frames = restoredFrames;
												mfzch.companies[ec].servermodified = result[i].data[c].servermodified;
												mfzch.companies[ec].clientmodified = false;

											} else {
												// save client to server now
												this.saveServerData(this.companies, 'mfz.companies');
											}
										}
									}

									if (!found) {
										// create if ID does not exist
										var company = new companyModel();

										company.id = result[i].data[c].id;
										company.name = result[i].data[c].name;
										company.description = result[i].data[c].description;
										company.shared = result[i].data[c].shared;
										company.color = result[i].data[c].color;

										var restoredFrames = [];
										for (var rf in result[i].data[c].frames) {
											restoredFrames[rf] = new frameModel;
											for (var frame in result[i].data[c].frames[rf]) {
												restoredFrames[rf][frame] = result[i].data[c].frames[rf][frame];
											}
										}
										company.frames = restoredFrames;

										company.servermodified = result[i].data[c].servermodified;
										company.clientmodified = false;

										mfzch.companies.push(company);
									}
								}
							}
						}
						mfzch.updateCompanyList();
					}
				});
				return true;
			}
			return false;
		} else {
			return false;
		}
	},
	syncServerData: function(dataType) {
		if (dataType == 'all') {
		//	&& this.saveServerData('game') && this.restoreServerData('game')
			return this.saveServerData('companies') && this.restoreServerData('companies')
		//	&& this.saveServerData('loadouts') && this.restoreServerData('loadouts')
		//	&& this.saveServerData('settings') && this.restoreServerData('settings')
			;
		} else {
			return this.saveServerData(dataType) && this.restoreServerData(dataType);
		}
	},

	/* undo/redo */

	undo: {
		states: [],
		currentState: 0,
		validStates: 0,

		setState: function() {
			this.currentState++;
			this.validStates = this.currentState;

			this.states[this.currentState] = JSON.stringify(mfzch.game);

			$('#undo').prop('disabled', false);
			$('#redo').prop('disabled', true);
		},
		getState: function() {
			if(this.currentState) {
				var redoState = this.currentState + 1;
				this.states[redoState] = JSON.stringify(mfzch.game);

				mfzch.game = this.restoreState(this.states[this.currentState]);
				this.currentState--;

				if (this.currentState < 1) {
					$('#undo').prop('disabled', true);
				}

				$('#redo').prop('disabled', false);
				$('#end-round').show();
			}
		},
		getRedoState: function() {
			if(this.currentState < this.validStates) {
				this.currentState++;
				var redoState = this.currentState + 1;

				mfzch.game = this.restoreState(this.states[redoState]);

				if(this.currentState >= this.validStates) {
					$('#redo').prop('disabled', true);
				}

				$('#undo').prop('disabled', false);
			} else {
				$('#redo').prop('disabled', true);
			}
		},
		restoreState: function(state) {
			return restoredGame = mfzch.JSONtoGameModel(state);
		},
		invalidateLastState: function() {
			this.currentState--;
			this.validStates = this.currentState;

			if (this.currentState < 1) {
				$('#undo').prop('disabled', true);
			}

			$('#redo').prop('disabled', true);
		}
	},

	/* interface */

	buildNav: function() {
		var nav = '<ul data-role="listview" data-inset="true" class="nav-listview">'
		+ '<li><a href="#game-tracking" id="battle-link">Battle Tracking</a></li>'
		+ '<li><a href="#dice-roller">Frame Simulator</a></li>'
		+ '<li><a href="#rules-reference">Rules of Engagement</a></li>';

		{% if is_granted('IS_AUTHENTICATED_FULLY')
		and "now"|date('Y-m-d') < app.user.elite_expires|date('Y-m-d') %}
			nav += '<li><a href="#tactics-and-strategy">Tactics and Strategy</a></li>';
		{% endif %}

		nav += '<li><a href="#loadouts">Frame Loadouts</a></li>'
		+ '<li><a href="#company-analysis">Company Structure</a></li>'
		+ '<li><a href="command-network" data-ajax="false">Commander\'s Network</a></li>'
		+ '</ul>';

		return nav;
	},
	buildNavPanel: function() {
		return navPanel = '<div data-role="panel" id="nav-panel" data-theme="c" data-position="left" data-position-fixed="true" data-display="reveal">'
		+ '<h2><a href="#main-page">MFZ:RA Commander&#8217;s Handbook</a></h2>'
		+ this.buildNav() + '</div>';
	},
	updateGameInfo: function(thisGame) {
		$('.gameinfo-type').html(thisGame.gameType);
		$('.gameinfo-round').html(thisGame.round);
		$('.gameinfo-remaining').html(thisGame.roundsRemaining(true));
		$('.gameinfo-doomsday').html(thisGame.doomsday);
	},
	updateSystemsInputs: function() {
		$('#team-systems').attr('max', $('#team-frames').val()*4 ).slider( "refresh" );
	},
	updateTeamList: function(thisGame) {
		$('#teams').empty();

		var newteam = '';

		for (var i in thisGame.teams) {
			var checkSetup = thisGame.checkSetup(thisGame.teams[i]);
			newteam += '<li id="team_'+ i +'" data-teamid="' + i + '"';

			if (!checkSetup.passing) {
				newteam += ' data-theme="c"';
			}

			if (thisGame.blindSetup) {
				newteam += ' data-icon="delete">';
				newteam += '<a href="#" class="team-del"><h2>' + getIcon('frame', thisGame.teams[i].color, 'game-icon') +  ' ' + thisGame.teams[i].name + '</h2>';
			} else {
				newteam += '>';
				newteam += '<a href="#team-adjust" data-rel="popup" data-position-to="window" data-transition="pop" class="team-manage">';
				newteam += '<h2>' + thisGame.teams[i].name + '</h2>';

				if (thisGame.trackingLevel <= 10) {
					newteam += '<div class="team-display-info">' + getIcon('frame', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].gFrames + ' ' + getIcon('system', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].sSystems + '</div>';
				} else {
					var totalSystems = thisGame.teams[i].totalSystems();

					newteam += '<div class="team-display-info">' + getIcon('frame', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].cFrames.length + ' ' + getIcon('system', thisGame.teams[i].color, 'game-icon') + totalSystems + '</div>';
				}

				if (!checkSetup.passing) {
					newteam += '<ul class="reason">';
					for (var r in checkSetup.reason) {
						newteam += '<li>' + checkSetup.reason[r] + '</li>';
					}
					newteam += '</ul>';
				}

			}

			newteam += '</a>';

			if (!thisGame.blindSetup) {
				newteam += '<a href="#" class="team-del">Delete</a></li>';
			}
		}

		if (thisGame.teams.length < thisGame.intendedPlayers) {
			newteam += '<li><a href="#" id="team-add" class="ui-btn ui-btn-b ui-icon-plus ui-btn-icon-left">Add Company</a></li>';
		}

		$('#teams').append(newteam);
		$('#teams').listview('refresh');
	},
	updateTeamFrameList: function(thisGame, team, jqobj) {
		jqobj.empty();
		var frames = team.cFrames
		var teamlist = '';

		for (var i in frames) {
			teamlist += '<li id="team_frame_'+ i +'" data-frameid="' + i + '">';
			teamlist += '<a href="#team-adjust-frame" data-rel="popup" data-position-to="window" data-transition="pop" class="team-frame-manage">';
			teamlist += frames[i].name;
			teamlist += frames[i].getSystemDisplay(false, false, 'in-list');
			teamlist += '</a>';
			teamlist += '<a href="#" class="team-frame-del">Delete</a></li>'
		}

		if (team.cFrames.length < thisGame.maxFrames) {
			teamlist += '<li><a href="#" id="team-frame-add" class="ui-btn ui-btn-b ui-icon-plus ui-btn-icon-left">Add Frame</a></li>';
		}

		jqobj.append(teamlist);
		jqobj.listview('refresh');
	},
	updateSetupParameters: function(thisGame) {
		thisGame.updateParameters();

		if (thisGame.gameType == 'Battle'
			|| thisGame.gameType == 'Skirmish') {
			$('#gp-framesPerPlayer').rangeslider('disable');
			$('#gp-stationsPerPlayer').slider('disable');
			$('#gp-doomsday').slider('disable');
			$('#gp-unclaimedStations').slider('disable');
			$('#gp-unclaimedStations').attr('max', 1);
			if(thisGame.intendedPlayers == 4) {
				$('#gp-unclaimedStations').slider('enable');
			}
		} else if (thisGame.gameType == 'Demo') {
			$('#gp-framesPerPlayer').rangeslider('disable');
			$('#gp-stationsPerPlayer').slider('disable');
			$('#gp-doomsday').slider('disable');
			$('#gp-unclaimedStations').slider('disable');
			$('#gp-unclaimedStations').attr('max', 1);
		} else { // Free Play
			$('#gp-framesPerPlayer').rangeslider('enable');
			$('#gp-stationsPerPlayer').slider('enable');
			$('#gp-doomsday').slider('enable');
			$('#gp-unclaimedStations').slider('enable');
			$('#gp-unclaimedStations').attr('max', MAXUNCLAIMEDSTATIONS);
		}

		$('#gp-framesPerPlayerMin').val(thisGame.minFrames);
		$('#gp-framesPerPlayerMax').val(thisGame.maxFrames);
		$('#gp-stationsPerPlayer').val(thisGame.stationsPerPlayer);
		$('#gp-doomsday').val(thisGame.doomsday);
		$('#gp-unclaimedStations').val(thisGame.unclaimedStations);

		$('#gp-framesPerPlayer').rangeslider('refresh');
		$('#gp-stationsPerPlayer').slider('refresh');
		$('#gp-doomsday').slider('refresh');
		$('#gp-unclaimedStations').slider('refresh');

		$('#game-players-amount').slider('refresh');
		$('#game-type-switch').selectmenu('refresh');
	},
	outputSetupParameters: function(thisGame) {
		var output = 'For this ' + thisGame.intendedPlayers + '-player ';

		if (thisGame.gameType == 'Battle') {
			output += 'battle';
		} else if (thisGame.gameType == 'Skirmish') {
			output += 'skirmish';
		} else if (thisGame.gameType == 'Demo') {
			output += 'demo game';
		} else if (thisGame.gameType == 'Custom') {
			output += 'custom game';
		} else {
			output += 'game';
		}

		output += ', each company must have '+ thisGame.minFrames;


		if (thisGame.minFrames == thisGame.maxFrames) {
			if (thisGame.minFrames == 1) {
				output += ' frame';
			} else {
				output += ' frames';

			}
		} else {
			output += '&#8211;' + thisGame.maxFrames + ' frames';
		}

		output += ' and ' + thisGame.stationsPerPlayer;

		if (thisGame.stationsPerPlayer == 1) {
			output += ' station.';
		} else {
			output += ' stations.';
		}

		if (thisGame.unclaimedStations) {
			output += '<br />' + thisGame.unclaimedStations + ' additional unclaimed';
			if (thisGame.unclaimedStations == 1) {
				output += ' station is';
			} else {
				output += ' stations are';
			}
			output += ' needed.';
		}

		output += '<br />';
		if (thisGame.trackingLevel == 10) {
			output += 'Simple';
		} else if (thisGame.trackingLevel == 20) {
			output += 'Detailed';
		} else if (thisGame.trackingLevel == 30) {
			output += 'Complete';
		} else {
			output += 'ERROR';
		}
		output += ' tracking will be used.'

		$('.game-params-text').html(output);
	},
	randomTeamName: function() {
		var list1 = ['Advanced', 'Ahu', 'Aleph', 'Alpha', 'Amritsar', 'Assault', 'Astromax', 'Beta', 'Bhadal', 'Blood', 'Boussht', 'Burned Moon', 'Callisto', 'Celiel', 'Ceres', 'Chabbing', 'Chet\'s', 'Chrome', 'Crimson', 'Deadeye', 'Deadly', 'Death', 'Deimos', 'Deku', 'Doomed', 'Dragon-slaying', 'Earth', 'Ekmer', 'Elite', 'Endymion', 'Enniot City', 'Enorn Two', 'Europa', 'Ferocious', 'Free Colony', 'Freedom', 'Gamma', 'Ganymede', 'Gemmel', 'Guerrilla', 'Guild', 'Gursk', 'Heavy', 'Gen. Hezeraiah\'s', 'Horrible', 'Hurdy-gurdy', 'Hutching', 'Hyperion', 'Ijad', 'Invincible', 'Io', 'Jakarta', 'Jovian', 'Junker', 'Kigali', 'Kush', 'Labor', 'Leda', 'Lunar', 'Luzon', 'Martian', 'Mechanical', 'Midnight', 'Mieze', 'Millennium', 'Momozono\'s', 'Napalm', 'Nanking', 'Newport Station', 'Northern Republic', 'Omega', 'Omicron', 'Orbital', 'Outback', 'Pathetic', 'Peach', 'Peloto', 'Phobos', 'Phoenix', 'Poshet', 'Prototype', 'Quall', 'Queslett', 'Ragged', 'Ransoll', 'Rock', 'Rookie', 'Rusty', 'Salvage', 'Selene', 'Scrap', 'Shebehu', 'Shiny', 'Shock', 'Sigma', 'Sol', 'Solar Union', 'Southport', 'Space', 'Spice', 'Steel', 'Stone', 'Strongarm', 'Support', 'TEM', 'Titan', 'TTA', 'TTM', 'Terran', 'Test', 'Thunder', 'Tien Shan', 'Transit Gate', 'Twankus Prime', 'UMFL', 'United', 'Venusian', 'Veteran', 'Wandering', 'Weeping Widow', 'Worthless'];
		var list2 = ['Anvil', 'Army', 'Assassins', 'Axe', 'Big Dogs', 'Blade', 'Brigade', 'Cannon', 'Cavaliers', 'Cell', 'Chabbers', 'Chuckers', 'Clanks', 'Cobras', 'Commandos', 'Company', 'Condors', 'Conscripts', 'Corps', 'Cowboys', 'Crew', 'Crusaders', 'Cultists', 'Deathtraps', 'Defenders', 'Delivery Service', 'Demolitions', 'Dragons', 'Eagles', 'Enforcers', 'Falcons', 'Fire Starters', 'Force', 'Formation', 'Frames', 'Freaks', 'Ghosts', 'Grashers', 'Griffins', 'Hammer', 'Hoplites', 'Hunters', 'Hutch Bunnies', 'Infantry', 'Jaguars', 'Knights', 'Lancers', 'Legion', 'Legionnaires', 'Lobsters', 'Marauders', 'Marines', 'Mercenaries', 'Militia', 'Miners', 'Nagas', 'Navigators', 'Outlaws', 'Overlords', 'Peacekeepers', 'Phalanx', 'Pirates', 'Pitbulls', 'Police', 'Protectors', 'Raiders', 'Rangers', 'Ravens', 'Rebels', 'Recon', 'Rejects', 'Rhinos', 'Ronin', 'Rustbuckets', 'Scorpions', 'Scouts', 'Scythe', 'Seals', 'Sentinels', 'Seraphs', 'Service', 'Shadows', 'Sharks', 'Shield', 'Sisterhood', 'Slackers', 'Slag', 'Snakes', 'Soldiers', 'Squadron', 'Standing Tanks', 'Storm', 'Striders', 'Strike Team', 'SWAT Team', 'Sword', 'Tarantulas', 'Team', 'Thunderhead', 'Tigers', 'Troopers', 'Vagrants', 'Vikings', 'Vipers', 'Warriors', 'Wedge', 'Wolverines'];
		var list3 = ['of Death', 'of Doom', 'of Pain'];

		var randName = '';
		var seed = Math.random();

		if (seed < 0.01) {
			randName = list1[Math.floor((Math.random() * (list1.length)))] + ' ' + list2[Math.floor((Math.random() * (list2.length)))] + ' ' + list3[Math.floor((Math.random() * (list3.length)))];
		} else if (seed < 0.03) {
			randName = list2[Math.floor((Math.random() * (list2.length)))] + ' ' + list3[Math.floor((Math.random() * (list3.length)))];
		} else {
			randName = list1[Math.floor((Math.random() * (list1.length)))] + ' ' + list2[Math.floor((Math.random() * (list2.length)))];
		}

		return randName;
	},
	generateDescriptor: function() {
		var newName = this.randomTeamName();
		var newColor = '#'+pad(Math.floor(Math.random()*16777215).toString(16), 6);

		return descriptor = [newName, newColor];
	},
	updateActiveTeams: function(thisGame) {
		thisGame.sortByScore();

		$('#active-game-teams').empty();

		for (var i in thisGame.teams) {
			var teamrow = '';

			teamrow = '<div class="team" data-team-index="'+ i + '">';

			teamrow += '<ul class="team-box" data-role="listview" data-inset="true"><li class="team-info">';

			teamrow += '<div class="team-score"><div class="score">' + thisGame.teams[i].gScore + '</div>';
			teamrow += '<small class="PPA">' + thisGame.teams[i].gPPA + ' PPA</small></div>';

			teamrow += '<div class="team-asset-summary">' + getIcon('frame', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].gFrames + '<br />';
			teamrow += getIcon('station', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].gStations + '</div>';

			teamrow += '<div class="team-name"><h2>' + thisGame.teams[i].name + '</h2></div></li>';

			if (thisGame.trackingLevel >= 20) {

				for (var j in thisGame.teams[i].cFrames) {
					teamrow += '<li class="team-frame';

					if (thisGame.trackingLevel >= 30) {
						if (thisGame.teams[i].cFrames[j].activated) {
							teamrow += ' activated" data-theme="c';
						}
					}

					teamrow += '" data-frameid="' + j + '"><a href="#" data-rel="popup" data-position-to="window" data-transition="pop" class="frame-smash">';

					teamrow += '<span class="lv-wsys-name">';

					if (thisGame.trackingLevel >= 30) {
						if (thisGame.teams[i].cFrames[j].activated) {
							teamrow += '<span data-sys="b">' + thisGame.teams[i].cFrames[j].defense + '</span>';
						}
						if (thisGame.teams[i].cFrames[j].spot > 0) {
							teamrow += '<span data-sys="y">' + thisGame.teams[i].cFrames[j].spot + '</span>';
						}
					}

					teamrow += getIcon('frame', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].cFrames[j].name + '</span>';

					teamrow += thisGame.teams[i].cFrames[j].getSystemDisplay(false, true, 'in-list');

					teamrow += '</a></li>';
				}
				teamrow += '</ul>';
			}

			teamrow += '</div>';

			$('#active-game-teams').append(teamrow);
			$('#active-game-teams').find('.team-box').listview();
		}
	},
	updateReadyStatus: function(thisGame) {
		var result = thisGame.checkSetup();

		if (result.passing) {
			$('#game-ready-status').html('<a href="#" id="confirm-companies" class="ui-btn ui-btn-b ui-icon-carat-r ui-btn-icon-right ui-corner-all">Confirm Companies</a>');
		} else {
			if (result.reason.length) {
				var response = '<ul>';
				for (var i in result.reason) {
					response += '<li>' + result.reason[i] + '</li>';
				}
				response += '</ul>';

				$('#game-ready-status').html('<div class="ui-body ui-body-a ui-corner-all">' + response + '</div>');
			} else {
				$('#game-ready-status').html('');
			}
		}
	},
	updateTieChoices: function(thisGame, teamid, totalTied) {
		$('#def-tie-teams').empty();
		for (var i = 0; i < mfzch.game.teams.length; i++) {
			var teamrow = '<li>';

			teamrow += '<div class="team-score"><div class="score">' + thisGame.teams[i].gScore + '</div>';
			teamrow += '<small class="PPA">' + thisGame.teams[i].gPPA + ' PPA</small></div>';

			teamrow += '<div class="team-asset-summary">' + getIcon('frame', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].gFrames + '<br />';
			teamrow += getIcon('system', thisGame.teams[i].color, 'game-icon') + thisGame.teams[i].sSystems + '</div>';

			teamrow += '<div class="team-name"><h2>' + thisGame.teams[i].name + '</h2></div></li>';

			$('#def-tie-teams').append(teamrow);
		}
		$('#def-tie-teams').listview('refresh');

		$('.def-tie-choice-team').html(getIcon('company', thisGame.teams[teamid].color, 'game-icon') + thisGame.teams[teamid].name);

		var actions = thisGame.tiedForDefenseActions(teamid, totalTied);

		$('#def-tie-choice').empty();

		for (var i in actions) {
			if (actions[i] == 'add-frame') {
				$('#def-tie-choice').append('<li data-icon="plus"><a href="#tie-frame-add" data-rel="popup">Add a frame</a></li>');
			} else if (actions[i] == 'remove-frame') {
				$('#def-tie-choice').append('<li data-icon="minus"><a href="#tie-frame-remove" data-rel="popup">Remove a frame</a></li>');
			} else if (actions[i] == 'defer') {
				$('#def-tie-choice').append('<li data-icon="forbidden"><a href="#" id="tie-defer">Defer choice to next company</a></li>');
			}
		}

		$('#def-tie-choice').listview('refresh');
		$('#def-team-choice-index').val(teamid);
	},
	determineTieChoices: function(thisGame) {
		var teamid = parseInt($('#def-team-choice-index').val());
		var numTied = mfzch.game.tiedForDefense();

		var nextTeam = teamid + 1;
		if (nextTeam >= numTied) {
			thisGame.reset();
			nextTeam = 0;
		}

		var teamName = thisGame.teams[nextTeam].name;

		thisGame.setPPA();
		thisGame.updateScores();
		thisGame.sortByScore();

		numTied = mfzch.game.tiedForDefense();

		if (numTied > 1){
			teamid = thisGame.findTeamByName(teamName);

			mfzch.updateTieChoices(thisGame, teamid, numTied)
		} else {
			// tie is resolved; move on
			mfzch.game.reset();

			if (mfzch.game.gameType == "Battle"
				|| mfzch.game.gameType == "Skirmish") {

				mfzch.game.status = 3;
				mfzch.saveData('game');

				$( ":mobile-pagecontainer" ).pagecontainer( "change", "#game-deployment", { changeHash: false } );
			} else {
				mfzch.game.status = 4;
				mfzch.saveData('game');

				$( ":mobile-pagecontainer" ).pagecontainer( "change", "#active-game", { changeHash: false } );
			}
		}
	},
	updateTieFrameList: function(thisGame, team, jqobj) {
		jqobj.empty();
		var frames = team.cFrames
		var teamlist = '';

		for (var i in frames) {
			teamlist += '<a href=""><li data-frameid="' + i + '">';
			teamlist += frames[i].name;
			teamlist += frames[i].getSystemDisplay(false, false, 'in-list');
			teamlist += '</a></li>'
		}

		jqobj.append(teamlist);
		jqobj.listview('refresh');
	},
	updateSystemDisplay: function(thisFrame) {
		// system display
		$('#active-systems').html(thisFrame.getSystemDisplay(true, true));

		// dice display
		if(!thisFrame.rollResult) { // if no current roll exists
			$('#active-dice').html(thisFrame.getDiceDisplay());
		} else {
			$('#active-dice').html(thisFrame.getRollDisplay());
		}

		$('.framespec').html(thisFrame.createFrameGraph(true));
	},
	getCapturableStations: function(captureTeam, isGaining) {
		var availableStations = '';
		var availableStationIDs = [];

		if (isGaining) {
			$('.station-capture-message').html('Who controls the station that <strong>' + getIcon('company', this.game.teams[captureTeam].color, 'game-icon') + this.game.teams[captureTeam].name + '</strong> is capturing?')

			for (var i in this.game.teams) {
				if (this.game.teams[i].gStations) {
					if (i != captureTeam) {
						if (this.game.teams[i].gStations) {
							availableStationIDs.push(i);
							availableStations += '<li data-icon="minus"><a href="#" class="station-capture-button" data-team-index="' + i + '">' + getIcon('company', this.game.teams[i].color, 'game-icon') + this.game.teams[i].name + ' <span class="ui-li-count">' + this.game.teams[i].gStations + '</span></a></li>';
						}
					}
				}
			}
			if(this.game.unclaimedStations) {
				availableStationIDs.push('nobody');
				availableStations += '<li data-icon="minus"><a href="#" class="station-capture-button" data-team-index="nobody">Unclaimed <span class="ui-li-count">' + this.game.unclaimedStations + '</span></a></li>';
			}

		} else {
			$('.station-capture-message').html('Who is gaining control of the station <strong>' + getIcon('company', this.game.teams[captureTeam].color, 'game-icon') + this.game.teams[captureTeam].name + '</strong> is losing?')

			for (var i in this.game.teams) {
				if (i != captureTeam && this.game.teams[i].gFrames) {
					availableStationIDs.push(i);
					availableStations += '<li data-icon="plus"><a href="#" class="station-drop-button" data-team-index="' + i + '">' + getIcon('company', this.game.teams[i].color, 'game-icon') + this.game.teams[i].name + ' <span class="ui-li-count">' + this.game.teams[i].gStations + '</span></a></li>';
				}
			}
			if (mfzch.game.checkUnclaimedIsPossible()) {
				availableStations += '<li data-icon="plus"><a href="#" class="station-drop-button" data-team-index="nobody">Nobody/Contested <span class="ui-li-count">' + this.game.unclaimedStations + '</span></a></li>';
			}
		}

		if (availableStationIDs.length == 1) {
			return availableStationIDs[0];
		} else if (availableStations) {
			$('#station-capture-list').html(availableStations);
			$('#station-capture-list').listview('refresh');
			$('#station-capture-list').show();
			return false;
		} else {
			$('.station-capture-message').html('There are no stations which <strong>' + getIcon('company', this.game.teams[captureTeam].color, 'game-icon') + this.game.teams[captureTeam].name + '</strong> may capture.');

			$('#station-capture-list').hide();
			return false;
		}
	},
	getShortCompanyList: function(){
		var output = '';
		for (var i in this.companies) {
			if (this.companies[i].frames.length < MAXFRAMES) {
				output += '<li data-id="' + i + '" data-icon="false"><a href="#">' + getIcon('company', this.companies[i].color, 'game-icon') + this.companies[i].name + '<span class="ui-li-count">' + this.companies[i].frames.length + '</span></a></li>';
			} else {
				output += '<li data-id="' + i + '">' + getIcon('company', this.companies[i].color, 'game-icon') + this.companies[i].name + '<span class="ui-li-count">Full</span></li>';
			}
		}
		return output;
	},
	updateLoadoutList: function() {
		$('#loadouts-custom').empty();
		var loadoutList = '<ul data-role="listview" data-split-icon="delete" data-inset="true">';

		for (var i in this.loadouts) {
			loadoutList += '<li data-load-id="' + i + '"><a href="#loadout-adjust" data-rel="popup" data-position-to="window" data-transition="pop" class="load-manage">';
			loadoutList += '<span class="lv-wsys-name">' + this.loadouts[i].name + '</span>';
			loadoutList += this.loadouts[i].getSystemDisplay(false, false, 'in-list no-ssr');
			loadoutList += '</a><a href="#" class="load-del">Delete</a></li>';
		}
		if (this.loadouts.length < MAXLOADOUTS) {
			loadoutList += '<li><a href="#" id="loadout-add" class="ui-btn ui-icon-plus ui-btn-icon-left">Add Loadout</a></li>';
		}
		loadoutList += '</ul>';

		$('#loadouts-custom').html(loadoutList);
		$('#loadouts-custom>ul').listview();
	},
	updateCompanyList: function() {
		$('#company-list').empty();

		for (var i in this.companies) {
			var companyList = '<li id="company_'+ i +'" data-companyid="' + i + '">'

			+ '<ul data-role="listview" data-split-icon="delete" data-inset="true" class="company-frames">'

			+ '<li data-theme="b"><a href="#company-adjust" data-rel="popup" data-position-to="window" data-transition="pop" class="company-manage" class="company-info">' + '<span class="lv-wsys-name">' + getIcon('company', this.companies[i].color, 'game-icon', true) + this.companies[i].name + '</span><ul class="companyinfo-string in-list">';

			companyList += '<li>' + getIcon('frame', this.companies[i].color, 'game-icon') + this.companies[i].frames.length + '</li>';
			companyList += '<li>' + getIcon('system', this.companies[i].color, 'game-icon') + this.companies[i].totalSystems() + '</li>';
			companyList += '<li><span data-sys="ssr">SSR</span>' + this.companies[i].totalSSRs()+ '</li>';

			companyList += '</ul></a>';

			companyList += '<a href="#" class="company-delete">Delete</a>';

			if (this.companies[i].frames.length) {
				companyList += '<li data-role="list-divider" class="company-graph-in-list">' + this.companies[i].getCompanyGraph() + '</li>';
			}

			for (var j in this.companies[i].frames) {
				companyList += '<li data-frameid="' + j + '"><a href="#frame-adjust" data-rel="popup" data-position-to="window" data-transition="pop" class="frame-manage">';

				companyList += '<span class="lv-wsys-name">' + getIcon('frame', this.companies[i].color, 'game-icon') + this.companies[i].frames[j].name + '</span>';

				companyList += this.companies[i].frames[j].getSystemDisplay(false, false, 'in-list');

				companyList += '</a><a href="#" class="frame-del">Delete</a></li>';
			}

			if (this.companies[i].frames.length < MAXFRAMES) {
				companyList += '<li><a href="#" class="frame-add ui-btn ui-btn-a ui-icon-plus ui-btn-icon-left">Add Frame</a></li>';
			}

			companyList += '</ul></li>';
			$('#company-list').append(companyList);
		}

		if (this.companies.length < MAXCOMPANIES) {
			$('#company-list').append('<li><a href="#" id="company-add" class="ui-btn ui-btn-a ui-corner-all ui-icon-plus ui-btn-icon-left">Add Company</a></li>');
		}

		$('.company-frames').listview();

		if (!mfzch.settings.showUnitGraphs) {
			$('.company-graph-in-list').hide();
		}
	},

	/* Deployment */

	frameNameScore: function(teamid) {
		return getIcon('company', this.game.teams[teamid].color, 'game-icon') + this.game.teams[teamid].name + ' &#8212; ' + this.game.teams[teamid].gScore + ' <small>(' + this.game.teams[teamid].gPPA + 'PPA)</small>';
	},
	frameName: function(teamid) {
		return getIcon('company', this.game.teams[teamid].color, 'game-icon') + this.game.teams[teamid].name;
	},

	/* Loadouts */

	extractLoadoutFromTitle: function(elInput, elOutput) {
		var name = $(elInput).parent().parent().find('.lv-wsys-name').html().trim();
		$(elOutput).attr('data-name', name);

		$(elOutput).html($(elInput).parent().parent().find('a .sys-display').html());
	},
	convertHtmlToLoadout: function(elInput) {
		var load = new frameModel;

		load.name = $(elInput).attr('data-name');
		$(elInput).find('li').each(function(){
			var sysType = $(this).attr('data-sys');
			load[sysType]++;
		});

		return load;
	},

	/* Structured Units */

	addCompanyToAsset: function() {
		var companyid = $('#company-index').val();

		var team = new teamModel();
		team.name = uniqueName(this.companies[companyid].name, buildNameArray(this.game.teams));

		team.color = this.companies[companyid].color;
		team.gFrames = this.companies[companyid].frames.length;
		team.sSystems = this.companies[companyid].totalSystems();

		 // Copy frames in
		for (var i in this.companies[companyid].frames) {
			team.cFrames[i] = new frameModel();
			for (var j in this.companies[companyid].frames[i]) {
				team.cFrames[i][j] = this.companies[companyid].frames[i][j];
			}
		}

		this.game.teams.push(team);
		mfzch.saveLocalData('game');

		$('#company-track-added').popup('open');
		try {
			ga('send', 'event', 'Company', 'Action', 'Send to Asset Tracker', 0, false);
		} catch (err) {}
	}
}

